{
    "anti_patterns": {
    "summary": "В изменениях замечены умеренно серьёзные антипаттерны, которые могут усложнить поддержку и развитие кода.",
    "detailed_analysis": "В коде была добавлена логика, нарушающая принцип единой ответственности (SRP): один класс обрабатывает данные, взаимодействует с сетью и управляет состоянием. Кроме того, в методах встречается дублирование кода и использование 'магических строк'. Эти проблемы пока не критичны, но могут быстро накапливать технический долг. Также замечена тесная связность между двумя модулями, что делает тестирование и изменение логики более трудозатратным.",
    "recommendations": [
        "Рассмотрите возможность декомпозиции класса, выделив отдельные компоненты под каждую зону ответственности.",
        "Избавьтесь от дублирования кода и 'магических строк' — используйте константы и переиспользуемые функции."
    ],
    "confidence": "High",
    "score": 6
    }
}
